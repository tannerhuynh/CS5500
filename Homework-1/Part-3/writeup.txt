This project gives a good example of poorly written code and asks you to critique the code. I think this allowed me to think about what could potentially be wrong about my code and how to avoid some of these pitfalls. The introduction of SonarLint is very helpful in detecting what is poorly written code. The plugin not only shows you what is poorly written but also shows a compliant example for you. I think this is very helpful in order to learn to how to write compliant code. While SonarQube might be a good tool for detecting smells and alerting you of code issues, there are some aspects of this tool that might be noise if not introduced before using it. I think it was extremely nice to see the commits/builds show up on sonarQube.

I think this homework was helpful when it asked us to first identify the issues with poorly written code and then refactor the current code. Since we have already identified some of the bad code, we are able to further reiterate what we've learned by refactoring the code. At the same time, the homework also introduces us to another level of complexity and refactoring through the use of the Gale-Shapely algorithm. This helps reiterate a previously learned topic, or introduce a new one if you haven't learned it before. Since the homework builds on previous work, the momentum helps keep me on task and builds on my learning. 

My only compliant is to sift out the noise. Perhaps, set expectations on what we should be doing and what we should ignore. I found that the tests would've required exhaustive testing in order to pass SonarQube coverage; however, I was told that we need not worry about it right now in Office Hours. There was an aspect of SonarQube that was a minor warning toward usage of Loggers potentially using up memory. This wasn't addressed during class as well. However, overall, I think the homework was very useful in reiterating lessons, building on lessons, and teaching new skills.